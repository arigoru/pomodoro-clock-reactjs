{"version":3,"sources":["components/durationControls.jsx","App.js","components/display.jsx","components/infoBar.jsx","serviceWorker.js","index.js"],"names":["intervalReference","timerReference","statusStrings","Display","state","this","props","status","flick","react_default","a","createElement","className","id","breakDuration","display","sessionDuration","Component","InfoBar","onClick","startStopHandler","children","resetHandler","callInterval","DurationControls","increaseBreak","_this","handler","decreaseBreak","increaseSession","decreaseSession","clearCall","clearInterval","window","removeEventListener","startCalls","func","addEventListener","setInterval","_this2","Fragment","onMouseDown","e","button","toggleFlick","parseTime","seconds","minutes","Math","floor","concat","App","ticking","timerValue","playNotification","notificationSound","play","setTimeout","pause","currentTime","switchSession","setState","secondTickHandler","stopSession","startSession","changeDuration","type","duration","newState","newDuration","resetState","durationControls","infoBar","preload","src","ref","audio","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bc2c53f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nlet intervalReference;\nconst callInterval = 100;\n\nclass DurationControls extends Component {\n  state = {};\n\n  increaseBreak = () => {\n    this.props.handler(1, 1);\n  };\n  decreaseBreak = () => {\n    this.props.handler(1, -1);\n  };\n  increaseSession = () => {\n    this.props.handler(0, 1);\n  };\n  decreaseSession = () => {\n    this.props.handler(0, -1);\n  };\n  clearCall = () => {\n    clearInterval(intervalReference);\n    window.removeEventListener(\"mouseup\", this.clearCall);\n    window.removeEventListener(\"mouseout\", this.clearCall);\n  };\n  startCalls = func => {\n    // func();\n    window.addEventListener(\"mouseup\", this.clearCall);\n    window.addEventListener(\"mouseout\", this.clearCall);\n    intervalReference = setInterval(func, callInterval);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"break-duration time-control\">\n          <h6 className=\"text-center\" id=\"break-label\">\n            Break Length\n          </h6>\n          <div\n            className=\" button button-in\"\n            id=\"break-increment\"\n            onClick={this.increaseBreak}\n            onMouseDown={e => {\n              if (e.button === 0) this.startCalls(this.increaseBreak);\n            }}\n          >\n            +\n          </div>\n          <div\n            className=\" button button-in\"\n            id=\"break-decrement\"\n            onClick={this.decreaseBreak}\n            onMouseDown={e => {\n              if (e.button === 0) this.startCalls(this.decreaseBreak);\n            }}\n          >\n            -\n          </div>\n        </div>\n        <div className=\"session-duration time-control\">\n          <h6 className=\"text-center\" id=\"session-label\">\n            Session Length\n          </h6>\n          <div\n            className=\"button button-in\"\n            id=\"session-increment\"\n            onClick={this.increaseSession}\n            onMouseDown={e => {\n              if (e.button === 0) this.startCalls(this.increaseSession);\n            }}\n          >\n            +\n          </div>\n          <div\n            className=\"button button-in\"\n            id=\"session-decrement\"\n            onClick={this.decreaseSession}\n            onMouseDown={e => {\n              if (e.button === 0) this.startCalls(this.decreaseSession);\n            }}\n          >\n            -\n          </div>\n\n          <div\n            className=\"button button-in\"\n            id=\"flicker-toggle\"\n            onClick={this.props.toggleFlick}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default DurationControls;\n","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport Display from \"./components/display\";\nimport InfoBar from \"./components/infoBar\";\nimport DurationControls from \"./components/durationControls\";\n\nfunction parseTime(seconds) {\n  let minutes = Math.floor(seconds / 60);\n  seconds = seconds - minutes * 60;\n  let result = minutes < 10 ? `0${minutes}:` : `${minutes}:`;\n  return result.concat(seconds < 10 ? `0${seconds}` : `${seconds}`);\n}\n\nlet timerReference;\n\nclass App extends Component {\n  state = {\n    flick: true,\n    ticking: false,\n    breakDuration: 5,\n    sessionDuration: 25,\n    timerValue: 25 * 60, // time to display in seconds\n    status: 0 // 0 - session, 1 - break\n    // currentTime: ,\n  };\n\n  playNotification = () => {\n    this.notificationSound.play();\n    setTimeout(() => {\n      this.notificationSound.pause();\n      this.notificationSound.currentTime = 0;\n    }, 3000);\n    return 0;\n  };\n\n  switchSession = () => {\n    if (this.state.status === 0) {\n      this.setState({\n        status: 1,\n        timerValue: 60 * this.state.breakDuration\n      });\n    } else {\n      this.setState({\n        status: 0,\n        timerValue: 60 * this.state.sessionDuration\n      });\n    }\n  };\n\n  secondTickHandler = () => {\n    if (this.state.timerValue === 0) {\n      this.playNotification();\n      this.switchSession();\n    } else {\n      this.setState({\n        timerValue: this.state.timerValue - 1\n      });\n    }\n  };\n\n  stopSession = () => {\n    clearInterval(timerReference);\n    this.setState({\n      ticking: false\n    });\n  };\n\n  startSession = () => {\n    timerReference = setInterval(this.secondTickHandler, 1000);\n    this.setState({\n      ticking: true\n    });\n  };\n\n  changeDuration = (type, duration) => {\n    if (!this.state.ticking) {\n      let newState = {};\n      // 0 for session duration, 1 for break duration\n      if (type === 0) {\n        let newDuration = this.state.sessionDuration + duration;\n        if (newDuration > 0 && newDuration <= 60) {\n          newState.sessionDuration = newDuration;\n          if (this.state.status === 0) newState.timerValue = 60 * newDuration;\n        }\n      } else {\n        let newDuration = this.state.breakDuration + duration;\n        if (newDuration > 0 && newDuration <= 60) {\n          newState.breakDuration = newDuration;\n          if (this.state.status === 1) newState.timerValue = 60 * newDuration;\n        }\n      }\n      this.setState(newState);\n    }\n  };\n  resetState = () => {\n    this.notificationSound.pause();\n    this.notificationSound.currentTime = 0;\n    clearInterval(timerReference);\n    this.setState({\n      timerValue: 25 * 60,\n      status: 0,\n      sessionDuration: 25,\n      breakDuration: 5,\n      ticking: false\n    });\n  };\n\n  toggleFlick = () => {\n    this.setState({\n      flick: !this.state.flick\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"secondary-body\" />\n        <div className=\"top-bar\" />\n        <DurationControls\n          toggleFlick={this.toggleFlick}\n          handler={this.changeDuration}\n        />\n        <InfoBar\n          startStopHandler={\n            this.state.ticking ? this.stopSession : this.startSession\n          }\n          resetHandler={this.resetState}\n        >\n          {this.state.ticking ? \"Stop\" : \"Start\"}\n        </InfoBar>\n        <Display\n          status={this.state}\n          display={parseTime(this.state.timerValue)}\n        />\n        <audio\n          id=\"beep\"\n          preload=\"auto\"\n          src=\"https://actions.google.com/sounds/v1/alarms/alarm_clock.ogg\"\n          ref={audio => {\n            this.notificationSound = audio;\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\n\nconst statusStrings = [\"Session\", \"Break\"];\n\nclass Display extends Component {\n  state = {};\n\n  render() {\n    return this.props.status.flick ? (\n      <div className=\"timer crt\">\n        <div className=\"display-3 time-label\" id=\"break-length\">\n          {this.props.status.breakDuration}\n        </div>\n        <div className=\"screen-center\">\n          <h1 className=\"display-1 time-label\" id=\"time-left\">\n            {this.props.display}\n          </h1>\n          <h1 className=\"display-4 time-label\" id=\"timer-label\">\n            {statusStrings[this.props.status.status]}\n          </h1>\n        </div>\n        <div className=\"display-3 time-label\" id=\"session-length\">\n          {this.props.status.sessionDuration}\n        </div>\n      </div>\n    ) : (\n      <div className=\"timer\">\n        <div className=\"display-3 time-label\" id=\"break-length\">\n          {this.props.status.breakDuration}\n        </div>\n        <div className=\"screen-center\">\n          <h1 className=\"display-1 time-label\" id=\"time-left\">\n            {this.props.display}\n          </h1>\n          <h1 className=\"display-4 time-label\" id=\"timer-label\">\n            {statusStrings[this.props.status.status]}\n          </h1>\n        </div>\n        <div className=\"display-3 time-label\" id=\"session-length\">\n          {this.props.status.sessionDuration}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Display;\n","import React, { Component } from \"react\";\n\nclass InfoBar extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"info-bar\">\n        <div className=\"display-4\" id=\"app-label\">\n          Pomodoro Clock\n        </div>\n        <h1\n          onClick={this.props.startStopHandler}\n          className=\"text-center display-4 button\"\n          id=\"start_stop\"\n        >\n          {this.props.children}\n        </h1>\n        <h1\n          onClick={this.props.resetHandler}\n          className=\"text-center display-4 button\"\n          id=\"reset\"\n        >\n          Reset\n        </h1>\n      </div>\n    );\n  }\n}\n\nexport default InfoBar;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}